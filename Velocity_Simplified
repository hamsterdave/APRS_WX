#include <TimerThree.h>

const byte pulsePin = 2;
const byte ppsPin = 20; // CHANGE SO HALL EFFECT IO DOESN'T USE PIN 3, CHANGE THIS TO 3
volatile bool pulseFlag;
volatile bool calcFlag;
volatile bool ppsFlag;
volatile unsigned long ppsCount;
volatile uint8_t pulseCount;
volatile uint8_t errorCount;
volatile unsigned long newTime;
volatile unsigned long oldTime;
volatile unsigned long newDeltaT;
//volatile unsigned long oldDeltaT;


int newDeltaV;
int oldDeltaV;
int pulseMinDeltaV;
int pulseMaxDeltaV;
unsigned int newVelocity;
unsigned int oldVelocity;
unsigned long pulseMinVelocity;
unsigned long pulseMaxVelocity;
unsigned long totalVelocity;
unsigned long totalDeltaV;
unsigned long ndtCopy;
unsigned long ppsCountCpy;




void setup() {
  Serial.begin(115200);
  Timer3.initialize(5000); //initialize timer3 with for 5mS (200Hz)
  Timer3.attachInterrupt(timeCheck); //call timeCheck function on compare match
  pulseCount = 0;
  errorCount = 0;
  oldTime = 0;
  newTime = 0;
  pulseMinVelocity = 255;
  pulseMaxVelocity = 0;
  pulseMinDeltaV = 127;
  pulseMaxDeltaV = -127;
  
  pinMode(pulsePin, INPUT_PULLUP);
  pinMode(4, OUTPUT);
  digitalWrite(4, LOW);
  pinMode(3, OUTPUT); //MOVE THIS TO NON ISR PIN
  digitalWrite(3, HIGH);
  attachInterrupt(digitalPinToInterrupt(pulsePin), readTime, FALLING);
  pinMode(ppsPin, INPUT);
  attachInterrupt(digitalPinToInterrupt(ppsPin), ppsInterrupt, RISING);
}


void readTime() {
  if (pulseFlag = false) {
    oldTime = newTime;
    newTime = micros(); //record time of pulse from timer1
    newDeltaT = newTime - oldTime;
    pulseCount ++;
    errorCount ++; // tracks data validity. 0 = wait for another pulse, 1 = do stuff, >1 = something broke.
    pulseFlag = true;
  }
  else {
    errorCount = 0;
    //ERROR FLAG HERE?
  }
}


void timeCheck() { //After pulse received, checks error count for data validity.
    if (pulseFlag == true) {
      switch (errorCount) {      
        case 1:               //1 valid time. Wait for second pulse before calculating
          calcFlag = false;
          break;
        case 2:               //2 good time measurements available. Calculate stuff
          calcFlag = true;
          errorCount = 1;
          break;
        default:              //Missed pulse or watchdog timeout. Invalidate previous time and wait for 2 new pulses.
          calcFlag = false;    
          errorCount = 0;
          break;
      }
      pulseFlag = false;
    }
}

  

void pulseCalc() {

    //oldDeltaT = newDeltaT; //IS oldDeltaT EVEN USED?
    oldVelocity = newVelocity;    
    newVelocity = 14000000 / newDeltaT; //tenths of MPH(IS THIS RIGHT FOR MICROS?)
    oldDeltaV = newDeltaV;
    newDeltaV = newVelocity - oldVelocity;
    
    
    if (newDeltaV > pulseMaxDeltaV) {   //Is this DT or V a new max or min?
      pulseMaxDeltaV = newDeltaV;       
    }
    else if (newDeltaV < pulseMinDeltaV) { //IS minDeltaV EVEN USEFUL?
      pulseMinDeltaV = newDeltaV;
    }
    if (newVelocity > pulseMaxVelocity) {
      pulseMaxVelocity = newVelocity;
    }
    else if (newVelocity < pulseMinVelocity) {
      pulseMinVelocity = newVelocity;
    }
    totalVelocity = totalVelocity + newVelocity; //Add newVelocity to velocity total for averaging later
    totalDeltaV = totalDeltaV + newDeltaV;
}


void ppsInterrupt() { //ISR for GPS PPS
    ppsCount ++;
    ppsFlag = true;
}


void oneSecond() {
}


void fiveSeconds() {
}

void tenSeconds() {
  
}

void thirtySeconds() {
  
}

void oneMinute() {
  
}

void twoMinutes() {
  
}

void fiveMinutes() {
  
}

void tenMinutes() {
  
}

void thirtyMinutes() {
  
}

void oneHour() {
  
}

void loop() {
  if (calcFlag == true) {    
      noInterrupts();
      ndtCopy = newDeltaT;  //copy shared data to a safe place to math it
      interrupts();    
      pulseCalc();
      calcFlag = false;
  }
  else if (ppsFlag = true) {
    noInterrupts();
    ppsCountCpy = ppsCount;
    interrupts();
    oneSecond();
    switch (ppsCountCpy) {
      case 3600:
        oneHour();
        break;
      case 1800:
        thirtyMinutes();
        break;
      case 600:
        tenMinutes();
        break;
      case 300:
        fiveMinutes();
        break;
      case 120:
        twoMinutes();
        break;
      case 60:
        oneMinute();
        break;
      case 30:
        thirtySeconds();
        break;
      case 10:
        tenSeconds();
        break;
      case 5:
        fiveSeconds();
        break;
      default:
        ppsFlag = false;
        break;
    }
    
  }
}
