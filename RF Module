#define TX_RXact 2  //Module Pin 1 Low = Squelch open, High = squelch closed
#define TX_AFout 3  //Module pin 3 Receive audio
#define TX_ptt 5    //Module pin 5 Low for TX
#define TX_sleep 6  //Module pin 6 0=sleep
#define TX_pwr 7    //Module pin 7 ***DO NOT SET TO HIGH, MUST FLOAT FOR HIGH POWER***
#define TX_AFin 9   //Module pin 18 Audio out from arduino
#define error_pin 13  //Onboard LED pin

String TX_shake = "AT+DMOCONNECT"; //handshake
String TX_sgHead = "AT+DMOSETGROUP="; //group set preamble
String TX_volHead = "AT+DMOSETVOLUME="; //volume preamble
String TX_filHead = "AT+DMOSETFILTER="; //audio filter preamble

//---------End all strings in this section with comma----------//
String TX_bw = "0,"; //0 = 12.5khz 1 = 25khz
String TX_txf = "144.3800,"; //TX frequency: Must use 4 digits after dot
String TX_rxf = "144.3800,"; //rx freq: " "
String TX_txpl = "0000,"; //TX CTCSS 0000 = none See programming manual for codes
String TX_sq = "6,"; //Squelch level 0-8: 0 = open
//------------------------------------------------------------//

String TX_rxpl = "0000"; //RX CTCSS
String TX_vol = "4"; //RX audio volume level 1-8
String TX_fil = "1,1,1"; //RX audio filter. Emphasis,Highpass,Lowpass 1 = bypass 0 = normal

String groupString = TX_sgHead + TX_bw + TX_txf + TX_rxf + TX_txpl + TX_sq + TX_rxpl;
String volumeString = TX_volHead + TX_vol;
String filterString = TX_filHead + TX_fil;

char shakeReply[32];
char groupReply[32];
char volumeReply[32];
char filterReply[32];

int serialCount = 0;

bool errorFlag;

//-------------------DEBUG------------------------//
//Prints all set commands and replies, turns on onboard LED. Last character should be 0. 1 = error
void txDebug() {
  digitalWrite(error_pin, HIGH);
  Serial.println("TRANSCEIVER ERROR");
  Serial.print("Handshake: ");
  Serial.println(TX_shake);
  Serial.print("Reply: ");
  Serial.println(shakeReply);
  Serial.print("SetGroup: ");
  Serial.println(groupString);
  Serial.print("Reply: ");
  Serial.println(groupReply);
  Serial.print("SetVolume: ");
  Serial.println(volumeString);
  Serial.print("Reply: ");
  Serial.println(volumeReply);
  Serial.print("SetFilter: ");
  Serial.println(filterString);
  Serial.print("Reply: ");
  Serial.println(filterReply); 
} 

//-----------------Handshake-----------------// 

void handShake() {
  serialCount = 0;
  Serial1.println(TX_shake);
  delay(100);
  Serial1.println(TX_shake);
  while (Serial1.available() > 0) {
    char incomingChar;
    incomingChar = Serial1.read();
    shakeReply[serialCount] = incomingChar;
    serialCount++;
  }
  if (serialCount == 0 || shakeReply[serialCount] == 1) {
    errorFlag = true;
  }    
}

//----------------SetGroup---------------//

void setGroup() {
  serialCount = 0;
  Serial1.println(groupString);
  delay(100);
  Serial1.println(groupString);
  while (Serial1.available() > 0) {
    char incomingChar;
    incomingChar = Serial1.read();
    groupReply[serialCount] = incomingChar;
    serialCount++;
  }
  if (serialCount == 0 || shakeReply[serialCount] == 1) {
    errorFlag = true;
  } 
}

//------------------SetVolume---------------//

void setVolume() {
  serialCount = 0;
  Serial1.println(volumeString);
  delay(100);
  Serial1.println(volumeString);
  while (Serial1.available() > 0) {
    char incomingChar;
    incomingChar = Serial1.read();
    volumeReply[serialCount] = incomingChar;
    serialCount++;
  }
  if (serialCount == 0 || volumeReply[serialCount] == 1) {
    errorFlag = true;
  }
}

//---------------SetFilter----------------//

void setFilter() {
  serialCount = 0;
  Serial1.println(filterString);
  delay(100);
  Serial1.println(filterString);
  while (Serial1.available() > 0) {
    char incomingChar;
    incomingChar = Serial1.read();
    filterReply[serialCount] = incomingChar;
    serialCount++;
  }
  if (serialCount == 0 || filterReply[serialCount] == 1) {
    errorFlag = true;
  }    
}

//---------------------SETUP----------------------//

void setup() {
  errorFlag = false;
  pinMode(TX_pwr, OUTPUT);
  digitalWrite(TX_pwr, LOW);
  pinMode(TX_RXact, INPUT);
  pinMode(TX_ptt, OUTPUT);
  digitalWrite(TX_ptt, HIGH);
  pinMode(TX_sleep, OUTPUT);
  digitalWrite(TX_sleep, HIGH);
  pinMode(error_pin, OUTPUT);
  digitalWrite(error_pin, LOW);

  Serial.begin(115200);
  Serial1.begin(9600);

  delay(4000);
  handShake();
  delay(500);
  setGroup();
  delay(500);
  setVolume();
  delay(500);
  setFilter();
  
  if (errorFlag == true) {
    txDebug();
  }
} 

void loop() {
 /* delay(4000);
  digitalWrite(TX_ptt, LOW);
  tone(TX_AFin, 1200);
  delay(1000);
  noTone(TX_AFin);
  tone(TX_AFin, 2400);
  delay(1000);
  noTone(TX_AFin);
  digitalWrite(TX_ptt, HIGH);
  */
  
}
