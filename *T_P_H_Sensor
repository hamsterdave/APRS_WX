#include <Wire.h>
#include <BMx280I2C.h>

BMx280I2C bmx280(I2C_ADDRESS);

#define I2C_ADDRESS 0x76
#define TEMP_PWR_PIN 22

char pressure[7];
char temperature[6];
char humidity[4];
char dewpoint[6];

unsigned int pres;
int temp;
int hum;
int dew;
byte tempInitError = 0;
byte tempReadError = 0;
byte tempStatus = 0;
byte tempFatal = 0;


//Disable the temp sensor and write zeros to APRS WX strings
void tempDisable() {
  digitalWrite(TEMP_PWR_PIN, LOW);
  pres = "b00000";
  temp = "t000";
  hum = "h00";
  dew = "dp000";

  tempStatus = "0";
  tempFatal = 1;
}


//Reset routine in case of initialization failure
void tempInitReset() {
  for (int e = 0; e <= 2; e++) {
    digitalWrite(TEMP_PWR_PIN, LOW);
    delay(300 * e);
    digitalWrite(TEMP_PWR_PIN, HIGH);
    delay(300 * e);
    if (bmx280.begin()) {
      tempSetup();
      return;
    }
    else if (tempInitError < 2){
      e++;
      tempInitError++;
    }
    else if (tempInitError >= 2) {
      tempDisable();
      return;
    }
  }
}


//Retry and reset routine for sensor read failure
void tempReadReset() {
  tempStatus = 0;
  delay(500);
  if (bmx280.measure()) {
    tempRead();
    if (tempStatus == 1) {
      return;
    }
  }
  else {
    for (int x = 0; x <= 2; x++) {
      if (tempReadError < 2) {
        digitalWrite(TEMP_PWR_PIN, LOW);
        delay(1000);
        tempSetup();
        delay(1000);
        tempRead();
        if (tempStatus == 1) {
          return;
        }
        tempReadError++;
      }
      else {
        tempDisable();
        return;
      }
    }
  }
}

//Setup routine, call in void setup()
void tempSetup() {
  pinMode(TEMP_PWR_PIN, OUTPUT);
  digitalWrite(TEMP_PWR_PIN, HIGH);

	//begin() checks the Interface, reads the sensor ID (to differentiate between BMP280 and BME280)
	//and reads compensation parameters.
  delay(500);
	if (!bmx280.begin()) {
		Serial.println("TEMP SETUP FAILED");
    tempInitReset();
	}

	//reset sensor to default parameters.
	bmx280.resetToDefaults();

	//set  oversampling to enable pressure, temperature, and humidity measurements. 
	bmx280.writeOversamplingPressure(BMx280MI::OSRS_P_x16);
	bmx280.writeOversamplingTemperature(BMx280MI::OSRS_T_x16);
	bmx280.writeOversamplingHumidity(BMx280MI::OSRS_H_x16);
}

void tempRead() {

	//start a measurement
	if (!bmx280.measure()) {
    tempReadReset();
	}
  else {
    tempStatus = 1;
  }
  

	//wait for the measurement to finish
	do {
		delay(100);
	} while (!bmx280.hasValue());

  //poll sensors and format data for APRS
	float p = bmx280.getPressure64();
  float p1 = p / 10;
  pres = (int)p1;

  sprintf(pressure, "b%05d", pres);
  //Serial.print("Pressure: ");
  //Serial.println(pressure);
  
	float t = bmx280.getTemperature();
  float t1 = (t * 1.8)  + 32;
  temp = (int)t1;

  sprintf(temperature, "t%03d", temp);
  //Serial.print("Temp: ");
  //Serial.println(temperature);

  float h = bmx280.getHumidity();
  hum = (int)h;
  if (hum == 100) {
    hum = 0;
  } 

  sprintf(humidity, "h%02d", hum);
  //Serial.print("Humidity: ");
  //Serial.println(humidity);
 
// calculate dewpoint
  float d = log(h/100) + (17.62 * t) / (243.12 + t);
  float d1 = 243.12 * d / (17.62 - d);
  d = (d1 * 1.8) + 32;
  dew = (int)d;

  sprintf(dewpoint, "dp%03d", dew);  
  //Serial.print("Dewpoint: ");
  //Serial.println(dewpoint);

}


void setup() {
  Serial.begin(9600);
  Wire.begin();
  tempSetup();
 
}

void loop() {
  tempRead();
  delay(2000);
}
